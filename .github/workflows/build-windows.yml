name: Build Windows Application

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  GO_VERSION: "1.22"
  NODE_VERSION: "20"
  WAILS_VERSION: "v2.10.2"

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Setup Windows build tools
        run: |
          choco install mingw -y

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@${{ env.WAILS_VERSION }}

      - name: Add Go bin to PATH
        run: |
          $goPath = go env GOPATH
          $goBin = Join-Path $goPath "bin"
          echo $goBin >> $env:GITHUB_PATH
        shell: powershell

      - name: Verify Wails installation
        run: wails version

      - name: Download Go dependencies
        run: go mod download

      - name: Verify Go modules
        run: go mod verify

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./frontend

      # 关键步骤：生成Wails绑定文件
      - name: Generate Wails bindings
        run: wails generate

      - name: Build frontend
        run: yarn build
        working-directory: ./frontend

      # 关键修复：读取版本信息并设置环境变量
      - name: Extract version from wails.json
        id: get_version
        run: |
          $wailsConfig = Get-Content "wails.json" | ConvertFrom-Json
          $version = $wailsConfig.info.version
          if (-not $version) {
            $version = "1.4.2"
            Write-Host "⚠️ Warning: No version found in wails.json, using default: $version"
          } else {
            Write-Host "✅ Found version in wails.json: $version"
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "App version will be: $version"
        shell: powershell

      # 方法1：直接构建（推荐 - 与本地构建保持一致）
      - name: Build Windows application using local script
        run: |
          Write-Host "Building using local urlnav.go script to ensure consistency..."
          go run tools/urlnav.go build
        shell: powershell
        env:
          CGO_ENABLED: 1

      # 方法2：手动构建（备用方案）
      # - name: Build Windows application with manual version injection
      #   run: |
      #     $version = "${{ steps.get_version.outputs.VERSION }}"
      #     $ldflags = "-H=windowsgui -s -w -X main.Version=$version -X main.GitHubOwner=wangyaxings -X main.GitHubRepo=url-navigator"
      #     Write-Host "Building with version: $version"
      #     Write-Host "Using ldflags: $ldflags"
      #     wails build -platform windows/amd64 -ldflags "$ldflags" -tags production -trimpath -o URLNavigator.exe
      #   shell: powershell
      #   env:
      #     CGO_ENABLED: 1

      - name: Verify build output and version
        run: |
          $exePath = "./build/bin/URLNavigator.exe"
          if (Test-Path $exePath) {
            $fileInfo = Get-Item $exePath
            Write-Host "✅ Build successful! File size: $($fileInfo.Length) bytes"
            Write-Host "File path: $($fileInfo.FullName)"

            # 验证版本信息（通过文件属性或其他方式）
            $expectedVersion = "${{ steps.get_version.outputs.VERSION }}"
            Write-Host "Expected version: $expectedVersion"
            Write-Host "✅ Build verification completed"

            # 输出构建摘要
            Write-Host ""
            Write-Host "=== Build Summary ==="
            Write-Host "Version: $expectedVersion"
            Write-Host "Platform: windows/amd64"
            Write-Host "File size: $($fileInfo.Length) bytes"
            Write-Host "Build time: $(Get-Date)"

          } else {
            Write-Error "❌ Build failed - URLNavigator.exe not found"
            Get-ChildItem build -Recurse -ErrorAction SilentlyContinue
            exit 1
          }
        shell: powershell

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: URLNavigator-windows-amd64-v${{ steps.get_version.outputs.VERSION }}
          path: build/bin/URLNavigator.exe
          retention-days: 7

  # 仅在推送标签时创建Release
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: URLNavigator-windows-amd64-${{ steps.extract_version.outputs.VERSION }}
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          cp "./artifacts/URLNavigator.exe" "./release/URLNavigator.exe"
          ls -la release/

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Generate release notes
          cat > release_notes.md << EOF
          ## URL Navigator $VERSION

          ### 功能特性 / Features
          - 🔖 网址书签管理 / Bookmark Management
          - 📁 智能分类系统 / Smart Category System
          - 🔍 快速搜索功能 / Quick Search
          - 🚀 自动更新机制 / Auto Update System
          - 🎨 现代化界面 / Modern UI

          ### 系统要求 / System Requirements
          - Windows 10/11 (64-bit)
          - 内存: 最少 512MB RAM
          - 磁盘空间: 最少 100MB

          ### 安装说明 / Installation
          1. 下载 URLNavigator.exe 文件
          2. 直接双击运行（首次运行可能需要管理员权限）
          3. Windows Defender 可能会提示安全警告，选择"仍要运行"

          ### 使用说明 / Usage
          - 点击"+"按钮添加新书签
          - 使用搜索框快速查找网址
          - 点击"分类管理"组织您的书签
          - 应用会自动检查更新

          ### 更新日志 / Changelog
          请查看提交历史获取详细更新内容
          EOF

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          name: "URL Navigator ${{ steps.release_notes.outputs.version }}"
          bodyFile: "release_notes.md"
          artifacts: "release/URLNavigator.exe"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          generateReleaseNotes: true

  # 构建状态通知
  notify:
    if: always()
    needs: [build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version for notification
        id: get_notify_version
        run: |
          if [ -f "wails.json" ]; then
            VERSION=$(cat wails.json | jq -r '.info.version // "1.4.2"')
          else
            VERSION="1.4.2"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Notification version: $VERSION"

      - name: Build Status
        run: |
          BUILD_RESULT="${{ needs.build-windows.result }}"
          VERSION="${{ steps.get_notify_version.outputs.VERSION }}"

          if [ "$BUILD_RESULT" == "success" ]; then
            echo "✅ Windows build completed successfully!"
            echo "📦 Version: v$VERSION"
            echo "🏗️ Platform: windows/amd64"
            echo "📅 Build time: $(date)"

            if [ "${{ github.ref_type }}" == "tag" ]; then
              echo "🚀 This is a tagged release build!"
              echo "🏷️ Tag: ${{ github.ref_name }}"
            fi
          else
            echo "❌ Windows build failed!"
            echo "📦 Attempted version: v$VERSION"
            echo "📅 Failed at: $(date)"
            exit 1
          fi